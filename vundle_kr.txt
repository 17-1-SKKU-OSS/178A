*vundle.txt*              Vundle, Vim 플러그인 매니저.             *vundle*

                              VUNDLE MANUAL

1. Vundle이란                                      |vundle-about|
2. 빠른 시작                                         |vundle-quickstart|
3. 플러그인                                          |vundle-plugins|
  3.1. 플러그인 환경설정                               |vundle-plugins-configure|
  3.2. URI 지원                                     |vundle-plugins-uris|
  3.3. 플러그인 설치                                  |vundle-plugins-install|
  3.4. 플러그인 업데이트                               |vundle-plugins-update|
  3.5. 플러그인 검색                                  |vundle-plugins-search|
  3.6. 플러그인 리스트                                 |vundle-plugins-list|
  3.7. 플러그인 정리                                  |vundle-plugins-cleanup|
4. Interactive 모드                                 |vundle-interactive|
5. 단축키                                           |vundle-keymappings|
6. 옵션                                            |vundle-options|
7. 플러그인 인터페이스 수정                             |vundle-interface-change|

=============================================================================
1. VUNDLE이란 ~
                                                               *vundle-about*

Vundle은 Vim bundle 의 약자로 Vim 플러그인 매니저입니다.

Vundle은 다음 기능들을 제공합니다.

  - `.vimrc`에 직접 플러그인들의 기록을 남기고 환경설정하기
  - 플러그인들을 설치하기 (scripts/bundle 와 같음)
  - 플러그인들을 업데이트하기
  - 사용 가능한 Vim scripts를 이름으로 검색하기
  - 사용하지 않는 플러그인들을 정리하기
  - interactive 모드에서 위 기능들을 하나의 키 로 실행하기

Vundle은 자동으로 다음을 수행합니다.

  - 설치된 스크립트들의 runtime 경로를 관리합니다
  - 설치 및 업데이트 후 도움말 태그를 재생성합니다

Vundle의 검색 기능은 http://vim-scripts.org 을 참고해 사용 가능한 모든 Vim script들의
리스트를 제공합니다

Vundle은 현재 인터페이스 수정 중입니다. 자세한 내용은 |vundle-interface-change|를
확인하십시오.

=============================================================================
2. 빠른 시작 ~
                                                          *vundle-quickstart*

1. 시작하기:

  Vundle을 설치하기 위해선 Git이 필요합니다. 설치 과정에서 각각의 저장소를
  ~/.vim/bundle/ 경로에 기본값으로 git clone합니다. 검색 기능을 위해 Curl이 필요합니다.

                                                             *vundle-windows*
  Windows 사용자라면, 다음의 위키 문서를 참조하십시오.
  https://github.com/VundleVim/Vundle.vim/wiki/Vundle-for-Windows.

                                                                 *vundle-faq*
  만약 어떤 문제라도 발생한다면, 자주 묻는 질문에 도움을 요청하십시오.
  https://github.com/VundleVim/Vundle.vim/wiki

2. Vundle 설치하기:
>
  git clone https://github.com/VundleVim/Vundle.vim.git ~/.vim/bundle/Vundle.vim
<
3. 번들 설정하기:

  Vundle을 사용하기 위해 다음을 .vimrc 파일의 첫 줄에 붙여넣으십시오.
  필요 없는 플러그인들을 삭제하십시오. 다음은 예시입니다.
>
    set nocompatible              " Vi와 호환 불가 설정, 필수
    filetype off                  " 필수

    " Vundle을 포함시키기 위해 runtime 경로를 설정하고 초기화
    set rtp+=~/.vim/bundle/Vundle.vim
    call vundle#begin()
    " 기존 경로 대신 Vundle이 플러그인을 설치할 경로를 입력하십시오.
    "call vundle#begin('~/some/path/here')

    " Vundle이 스스로를 관리하도록 설정, 필수
    Plugin 'VundleVim/Vundle.vim'

    " 아래는 지원되는 여러 형식들의 예시입니다
    " 플러그인 명령어를 vundle#begin/end 사이에 추가하십시오
    " GitHub 저장소에 있는 플러그인
    Plugin 'tpope/vim-fugitive'
    " http://vim-scripts.org/vim/scripts.html 에 있는 플러그인
    " 'L9' 플러그인
    " GitHub에 호스트 되어있지 않는 Git 플러그인
    Plugin 'git://git.wincent.com/command-t.git'
    " 사용하는 기기의 git 저장소 ( 당신만의 플러그인을 사용할 때 )
    Plugin 'file:///home/gmarik/path/to/plugin'
    " sparkup vim script는 vim 이란 이름의 저장소 하위 디렉토리 내부에 있습니다.
    " 정확한 runtime 경로를 입력하십시오.
    Plugin 'rstacruz/sparkup', {'rtp': 'vim/'}
    " L9를 설치하고, 만약 당신이 다른 버전을 어딘가 설치했을 경우 발생하는 이름 충돌 문제를 방지합니다
    " Plugin 'ascenator/L9', {'name': 'newL9'}

    " 당신의 모든 플러그인은 다음 명령어 이전에 추가되어야 합니다
    call vundle#end()            " 필수
    filetype plugin indent on    " 필수
    " 플러그인의 들여쓰기 변화를 무시하려면, 대신 이 명령어를 사용하십시오:
    "filetype plugin on
    "
    " 간단한 도움말
    " :PluginList       - 설정된 플러그인의 리스트
    " :PluginInstall    - 플러그인 설치; 업데이트를 하려면 `!`를 덧붙이거나 :PluginUpdate 명령을 사용하십시오
    " :PluginSearch foo - foo에 대해 검색; `!`를 덧붙여 로컬 캐시를 새로고침하십시오
    " :PluginClean      - 사용하지 않는 플러그인의 삭제를 확인; `!`를 붙여 자동 삭제를 승인하십시오
    "
    " 더 자세한 내용은 :h vundle 문서나 wiki의 FAQ를 확인하십시오
    " 다음 줄부터 플러그인이 아닌 내용을 넣으십시오

4. 설정된 번들 설치하기:

  vim을 켠 후 다음을 실행하십시오
>
    :PluginInstall
<
  명령줄에서 설치:
>
    vim +PluginInstall +qall

=============================================================================
3. 플러그인 ~
                                                             *vundle-plugins*

3.1 플러그인 설정하기 ~
                                         *vundle-plugins-configure* *:Plugin*

Vundle은 `.vimrc`에서 `Plugin` 명령을 통해 설정하고 싶은 플러그인을 기록합니다.
각 `Plugin` 명령은 Vundle이 스크립트를 |runtimepath|에 추가하고 시작 시 활성화하도록 알려줍니다.
주석 처리나 명령줄 삭제를 통해 `Plugin`을 비활성화할 수 있습니다.

각 `Plugin` 명령은 스크립트를 가리키는 URI를 가집니다.
어떤 주석도 명령과 같은 줄에 작성 될 수 없습니다. 다음은 예시입니다:
>
  Plugin 'git_URI'

`Plugin` 명령어는 선택적으로 URI 뒤에 두 번째 인자를 가질 수 있습니다.
딕셔너리 형태여야 하고, URI와 쉼표로 구분되어야 합니다. 딕셔너리의 각 키-값 쌍은 환경설정 옵션입니다.

다음의 스크립트 전에 작성되는 환경설정 옵션들은 사용 가능합니다.

'rtp' 옵션
----------------

저장소 내 vim 플러그인이 존재하는 경로를 명시합니다. (저장소의 root 디렉토리부터 상대 경로)
이 옵션은 |runtimepath|에 추가될 경로를 결정합니다.

예시:
>
  Plugin 'git_URI', {'rtp': 'some/subdir/'}

이 옵션은 하위 디렉토리에 vim 플러그인을 넣은 git 저장소에서 사용 가능합니다.

'name' 옵션
-----------------

설정된 스크립트의 로컬 복제본이 가질 경로의 이름을 명시합니다.

예시:
>
  Plugin 'git_URI', {'name': 'newPluginName'}

이 옵션은 Vundle이 같은 경로에 복제하려 할 때 발생하는 플러그인 간의 이름 충돌을 방지할 수 있습니다.
또한 추가적인 단계의 커스터마이징을 제공합니다.

'pinned' 옵션
-------------------

만약 옵션 플래그가 1로 설정되어 있다면, 이미 `bundles` 디렉토리 내에 존재하는 플러그인을
|runtimepath|에 추가하는 동안 Vundle이 플러그인에서 어떤 명령도 수행하지 못하도록 합니다.

For example:
>
  Plugin 'mylocalplugin', {'pinned': 1}

이 기능은 사용자가 Git 이외의 버전 관리 시스템을 Vundle과 함께 포함시킬 수 있도록 해주지만,
사용자는 저장소를 복제하고 최신 상태를 유지해야 합니다.
또한 사용자가 Vundle이 예전에 업데이트한 플러그인의 버전에 남아있을 수 있도록 합니다.

URI는 다른 플러그인에도 같은 것으로 취급되고,그 마지막 단계는 |runtimepath|에 추가되는 것임을
주의해주십시오. 혼동을 방지하기 위해 이 옵션 플래그를 single word URI에만 사용하는 것이 바람직합니다.

3.2 URI 지원 ~
                                                        *vundle-plugins-uris*

`Vundle`은 GitHub와 vim-scripts.org(http://vim-scripts.org/vim/scripts.html)
이 통합되어 축소 URI를 지원합니다. 또한 Vundle은 Git이 인식할 수 있는
모든 종류의 URI를 사용 할 수 있습니다. local 주소를 제외한 모든 상황에서
‘https’ 프로토콜이 사용됩니다. 이를 중단하려면 Vundle의 옵션을 확인하세요.

Git의 프로토콜에 관한 더 많은 정보는 다음 주소에서 확인 할 수 있습니다:
http://git-scm.com/book/ch4-1.html

GitHub
------
GitHub는 ‘Plugin’에 user/repo가 입력되었을 때 사용됩니다
>
  Plugin 'VundleVim/Vundle.vim' => https://github.com/VundleVim/Vundle.vim

Vim Scripts
-----------
‘/’없는 주소는 Vim Scripts내에 있는 것으로 간주합니다.
>
  Plugin 'ctrlp.vim' => https://github.com/vim-scripts/ctrlp.vim

기타 Git URIs
--------------
위 URL의 외부를 가리키는 유효한 URI는 어떠한 수정도 하지 않습니다.
>
  Plugin 'git://git.wincent.com/command-t.git'

로컬 Plugins
-------------
Git 프로토콜은 'file://'을 통해 로컬 설치를 지원합니다.
이는 Plugin을 로컬에서 개발할때 매우 편리합니다. script 디렉토리에서
절대경로를 다음 프로토콜에 따라 입력하십시오..
>
  Plugin 'file:///path/from/root/to/plugin'

3.3 PLUGINS 설치 ~
                                    *vundle-plugins-install* *:PluginInstall*
>
  :PluginInstall

이 명령어는 ‘vimrc’에 설정된 모든 플러그인을 설치합니다.
새로 설치된 플러그인 자동적으로 활성화됩니다. 몇몇 플러그인은 해당 플러그인
문서에서 명시한 컴파일이나 외부 프로그램과 같은 추가적인 단계가 필요할 수 있습니다.

PluginInstall은 플러그인의 이름을 이용해 설치할 수도 있습니다.:
>
  :PluginInstall unite.vim

unite.vim을 설치 및 활성화.

PluginInstall은 복수의 플러그인을 띄어쓰기를 통해 분리해서 설치할 수 있습니다.
>
  :PluginInstall tpope/vim-surround tpope/vim-fugitive

tpope/vim-surround와 tpope/vim-fugitive 둘다 GitHub를 통해 설치
당신은 Tab을 통해 알고 있는 스크립트 script 이름을 자동완성 할 수도 있습니다.
명심하십시오. 지금까지 설명한 설치는 영구적이지 않습니다.
끝내기 위해서는 당신은 반드시 ‘Plugin 'unite.vim'을 ‘.vimrc’의 
올바른 위치에 두어야 Vundle이 시작할때 당신의 플러그인을 로딩할 것입니다.

플러그인 설치가 끝난 후 'l' ('L'의 소문자)를 눌러 명령어 로그를 확인해
에러가 발생하지 않았는지 확인할 수 있습니다.

3.4 플러그인 업데이트 ~
                    *vundle-plugins-update* *:PluginUpdate* *:PluginInstall!*
>
  :PluginInstall!   " NOTE: bang(!)
or >
  :PluginUpdate

설정된 플러그인을 설치 혹은 업데이트를 합니다. 업데이트가 완료되면
‘u’를 눌러 업데이트된 플러그인들의 변경로그를 확인할 수 있습니다. 
'l' ('L'의 소문자)를 눌러 명령어 로그를 확인해 에러가 발생하지 않았는지 확인할 수 있습니다.

특정한 플러그인을 업데이트 하려면 띄어쓰기를 한 후 이름을 입력하십시오.
>
  :PluginInstall! vim-surround vim-fugitive
혹은 >
  :PluginUpdate vim-surround vim-fugitive

3.5 플러그인 검색 ~
                                      *vundle-plugins-search* *:PluginSearch*
>
  :PluginSearch

검색은 해당 시스템에서 ‘curl’사용이 가능해야 합니다. 이 명령어는 
Vim Scripts (http://vim-scripts.org/vim/scripts.html)에서 일치하는 플러그인을
검색합니다. 결과는 새로 분리된 창에 표시됩니다. 예를 들어:
>
  PluginSearch foo

결과 출력:
>
  "Search results for: foo
  Plugin 'MarkdownFootnotes'
  Plugin 'VimFootnotes'
  Plugin 'foo.vim'
<
                                                             *:PluginSearch!*
이것 대신 명령어에 느낌표를 붙임으로써 스크립트 리스트를 검색전에
새로고침을 할 수 있습니다.
>
  :PluginSearch! foo

만약 이 명령어를 인자 없이 실행시켰다면:
>
  :PluginSearch!

이는 모든 알고있는 플러그인들을 새 분할창에 출력할 것입니다.

3.6 플러그인 리스트 ~
                                          *vundle-plugins-list* *:PluginList*
>
  :PluginList

설치된 플러그인들의 리스트를 출력합니다.

3.7 정리하기 ~
                                      *vundle-plugins-cleanup* *:PluginClean*
>
  :PluginClean

‘.vimrc’에 더이상 설정되어있지 않으나 현재 플러그인 설치 경로에 설치되어있는 모든
플러그인을 제거하기위해 승인을 요구합니다.
(default: `.vim/bundle/`).

                                                              *:PluginClean!*
>
  :PluginClean!

사용하지 않는 플러그인에 대한 제거를 자동으로 승인합니다.

=============================================================================
4. 상호작용 모드 ~
                                                         *vundle-interactive*

Vundle은 새로운 플러그인을 쉽게 조사할 수 있는 간단한 상호작용 모드를 제공합니다. 상호작용 모드는 PluginSearch, PluginList, Plugins같은 'Plugins'이 붙은 명령 다음에 사용할 수 있습니다. 예시 :
>
  :PluginSearch! unite

'unite'와 일치하는 플러그인을 검색 후 분할된 창에 띄우려면:
>
  "Keymap: i - Install bundle; c - Cleanup; s - Search; R - Reload list
  "Search results for: unite
  Plugin 'unite-scriptenames'
  Plugin 'unite.vim'
  Plugin 'unite-yarm'
  Plugin 'unite-gem'
  Plugin 'unite-locate'
  Plugin 'unite-font'
  Plugin 'unite-colorscheme'

To install a bundle, move your cursor to the Plugin of interest and then
select a command. To install 'unite.vim' put your cursor on the line and
then push `i`. For a more complete list see |vundle-keymappings|. After
unite.vim is installed the `:Unite file` command should be available.

Note: Interactive installation doesn't update your `.vimrc`.

=============================================================================
5. KEY MAPPINGS ~
                                                         *vundle-keymappings*

KEY | DESCRIPTION
----|-------------------------- >
 i  |  run :PluginInstall with name taken from line cursor is positioned on
 I  |  same as i, but runs :PluginInstall! to update bundle
 D  |  delete selected bundle (be careful not to remove local modifications)
 c  |  run :PluginClean
 s  |  run :PluginSearch
 R  |  fetch fresh script list from server

=============================================================================
6. OPTIONS ~
                                                             *vundle-options*
>
  let g:vundle_default_git_proto = 'git'
<
  This option makes Vundle use `git` instead of `https` when building
  absolute URIs. For example:
>
    Plugin 'sjl/gundo.vim' -> git@github.com:sjl/gundo.git

=============================================================================
7. VUNDLE INTERFACE CHANGE ~
                        *vundle-interface-change* *:Bundle* *:BundleInstall!*
                *:BundleUpdate* *:BundleSearch* *:BundleList* *:BundleClean!*
                            *:VundleInstall!* *:VundleUpdate* *:VundleSearch*
                                                *:VundleList* *:VundleClean!*

  In order to bring in new changes, Vundle is adopting a new interface.
  Going forward we will support primarily the Plugin namespace, additionally
  for convenience we will also alias some commands to the Vundle namespace.
  The following table summarizes the interface changes.

  Deprecated Names  | New Names
  -----------------------------
  Bundle            | Plugin
  BundleInstall(!)  | PluginInstall(!), VundleInstall(!)
  BundleUpdate      | PluginUpdate, VundleUpdate
  BundleSearch(!)   | PluginSearch(!), VundleSearch(!)
  BundleClean       | PluginClean(!), VundleClean(!)
  BundleList        | PluginList

  Note: The Bundle commands will be deprecated. You may continue using them,
  but they may not get all future updates. For instance, we have enabled
  comments on Plugin lines but not Bundle, since it requires a change in
  command declaration.

" vim: set expandtab sts=2 ts=2 sw=2 tw=78 ft=help norl: